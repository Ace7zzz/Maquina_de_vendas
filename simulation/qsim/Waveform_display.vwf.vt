// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/25/2021 17:43:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          acionarDisplay
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module acionarDisplay_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] estado;
reg [1:0] num1;
reg [1:0] num2;
reg [3:0] valorMoedas;
// wires                                               
wire [7:0] D1;
wire [7:0] D2;
wire [7:0] D3;
wire [7:0] D4;
wire [7:0] segmentos;

// assign statements (if any)                          
acionarDisplay i1 (
// port map - connection between master ports and signals/registers   
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.clk(clk),
	.estado(estado),
	.num1(num1),
	.num2(num2),
	.segmentos(segmentos),
	.valorMoedas(valorMoedas)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// estado[ 2 ]
initial
begin
	estado[2] = 1'b0;
	estado[2] = #400000 1'b1;
	estado[2] = #400000 1'b0;
end 
// estado[ 1 ]
initial
begin
	repeat(2)
	begin
		estado[1] = 1'b0;
		estado[1] = #200000 1'b1;
		# 200000;
	end
	estado[1] = 1'b0;
end 
// estado[ 0 ]
always
begin
	estado[0] = 1'b0;
	estado[0] = #100000 1'b1;
	#100000;
end 
// num1[ 1 ]
initial
begin
	num1[1] = 1'b0;
	num1[1] = #400000 1'b1;
	num1[1] = #400000 1'b0;
end 
// num1[ 0 ]
initial
begin
	repeat(2)
	begin
		num1[0] = 1'b0;
		num1[0] = #200000 1'b1;
		# 200000;
	end
	num1[0] = 1'b0;
end 
// num2[ 1 ]
initial
begin
	num2[1] = 1'b0;
	num2[1] = #400000 1'b1;
	num2[1] = #400000 1'b0;
end 
// num2[ 0 ]
initial
begin
	repeat(2)
	begin
		num2[0] = 1'b0;
		num2[0] = #200000 1'b1;
		# 200000;
	end
	num2[0] = 1'b0;
end 
// valorMoedas[ 3 ]
initial
begin
	valorMoedas[3] = 1'b1;
end 
// valorMoedas[ 2 ]
initial
begin
	valorMoedas[2] = 1'b1;
	valorMoedas[2] = #800000 1'b0;
end 
// valorMoedas[ 1 ]
initial
begin
	valorMoedas[1] = 1'b1;
	valorMoedas[1] = #400000 1'b0;
	valorMoedas[1] = #400000 1'b1;
end 
// valorMoedas[ 0 ]
initial
begin
	valorMoedas[0] = 1'b1;
	valorMoedas[0] = #200000 1'b0;
	valorMoedas[0] = #200000 1'b1;
	valorMoedas[0] = #200000 1'b0;
	valorMoedas[0] = #200000 1'b1;
end 
endmodule

