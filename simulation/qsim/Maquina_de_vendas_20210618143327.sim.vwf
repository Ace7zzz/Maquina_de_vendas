/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2020  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and any partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details, at
https://fpgasoftware.intel.com/eula.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 100000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 500.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("D1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("D2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("D3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("D4")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("DM")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("LP")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("moeda")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("moeda[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "moeda";
}

SIGNAL("moeda[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "moeda";
}

SIGNAL("segmentos")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("segmentos[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("segmentos[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "segmentos";
}

SIGNAL("tecla")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("tecla[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "tecla";
}

SIGNAL("tecla[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "tecla";
}

SIGNAL("tecla[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "tecla";
}

SIGNAL("tecla[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "tecla";
}

TRANSITION_LIST("D1")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 6.151;
			LEVEL 1 FOR 15009.553;
			LEVEL 0 FOR 84984.296;
		}
	}
}

TRANSITION_LIST("D2")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 6.149;
			LEVEL 0 FOR 15009.553;
			LEVEL 1 FOR 31999.647;
			LEVEL 0 FOR 52984.651;
		}
	}
}

TRANSITION_LIST("D3")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 5.815;
			LEVEL 0 FOR 47009.909;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 20984.276;
		}
	}
}

TRANSITION_LIST("D4")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 5.784;
			LEVEL 0 FOR 79009.894;
			LEVEL 1 FOR 20984.322;
		}
	}
}

TRANSITION_LIST("DM")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 10.879;
			LEVEL 0 FOR 15004.61;
			LEVEL 1 FOR 15997.141;
			LEVEL 0 FOR 18002.235;
			LEVEL 1 FOR 13997.765;
			LEVEL 0 FOR 16002.859;
			LEVEL 1 FOR 15997.141;
			LEVEL 0 FOR 4987.37;
		}
	}
}

TRANSITION_LIST("LP")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 10.539;
			LEVEL 0 FOR 47004.61;
			LEVEL 1 FOR 1999.802;
			LEVEL 0 FOR 50985.049;
		}
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
		}
	}
}

TRANSITION_LIST("moeda[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 38000.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 60000.0;
		}
	}
}

TRANSITION_LIST("moeda[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 38000.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 60000.0;
		}
	}
}

TRANSITION_LIST("segmentos[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 15.279;
			LEVEL 1 FOR 15007.615;
			LEVEL 0 FOR 15997.141;
			LEVEL 1 FOR 15997.482;
			LEVEL 0 FOR 2005.396;
			LEVEL 1 FOR 14000.203;
			LEVEL 0 FOR 16000.164;
			LEVEL 1 FOR 15997.141;
			LEVEL 0 FOR 4979.579;
		}
	}
}

TRANSITION_LIST("segmentos[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 15.303;
			LEVEL 1 FOR 47002.967;
			LEVEL 0 FOR 2005.851;
			LEVEL 1 FOR 13997.765;
			LEVEL 0 FOR 16002.595;
			LEVEL 1 FOR 3.144;
			LEVEL 0 FOR 20972.375;
		}
	}
}

TRANSITION_LIST("segmentos[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 15.186;
			LEVEL 1 FOR 47002.966;
			LEVEL 0 FOR 2007.769;
			LEVEL 1 FOR 13995.137;
			LEVEL 0 FOR 16003.305;
			LEVEL 1 FOR 15997.141;
			LEVEL 0 FOR 4978.496;
		}
	}
}

TRANSITION_LIST("segmentos[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 15.275;
			LEVEL 1 FOR 15007.615;
			LEVEL 0 FOR 15997.141;
			LEVEL 1 FOR 15997.482;
			LEVEL 0 FOR 2007.846;
			LEVEL 1 FOR 13997.249;
			LEVEL 0 FOR 16003.823;
			LEVEL 1 FOR 15993.998;
			LEVEL 0 FOR 4979.571;
		}
	}
}

TRANSITION_LIST("segmentos[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 16.523;
			LEVEL 1 FOR 11002.478;
			LEVEL 0 FOR 4002.151;
			LEVEL 1 FOR 2.986;
			LEVEL 0 FOR 15997.141;
			LEVEL 1 FOR 15997.482;
			LEVEL 0 FOR 2005.396;
			LEVEL 1 FOR 13999.649;
			LEVEL 0 FOR 36976.194;
		}
	}
}

TRANSITION_LIST("segmentos[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 15.295;
			LEVEL 1 FOR 11002.338;
			LEVEL 0 FOR 4003.51;
			LEVEL 1 FOR 31997.121;
			LEVEL 0 FOR 2005.878;
			LEVEL 1 FOR 13999.655;
			LEVEL 0 FOR 16003.82;
			LEVEL 1 FOR 15993.999;
			LEVEL 0 FOR 4978.384;
		}
	}
}

TRANSITION_LIST("segmentos[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 16.386;
			LEVEL 0 FOR 11001.117;
			LEVEL 1 FOR 4003.325;
			LEVEL 0 FOR 3.173;
			LEVEL 1 FOR 15997.141;
			LEVEL 0 FOR 18002.878;
			LEVEL 1 FOR 2.403;
			LEVEL 0 FOR 13994.614;
			LEVEL 1 FOR 2.625;
			LEVEL 0 FOR 16003.825;
			LEVEL 1 FOR 15994.006;
			LEVEL 0 FOR 4978.507;
		}
	}
}

TRANSITION_LIST("segmentos[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 11.379;
			LEVEL 0 FOR 99988.621;
		}
	}
}

TRANSITION_LIST("tecla[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 8000.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 90000.0;
		}
	}
}

TRANSITION_LIST("tecla[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4000.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 94000.0;
		}
	}
}

TRANSITION_LIST("tecla[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 100000.0;
		}
	}
}

TRANSITION_LIST("tecla[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 12000.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 86000.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "moeda";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3;
}

DISPLAY_LINE
{
	CHANNEL = "moeda[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "moeda[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "tecla";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "tecla[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "tecla[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "tecla[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "tecla[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "D1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D4";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "DM";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "LP";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
	CHILDREN = 16, 17, 18, 19, 20, 21, 22, 23;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "segmentos[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 15;
}

TIME_BAR
{
	TIME = 35000000;
	MASTER = TRUE;
}
;
